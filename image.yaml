schema_version: 1

name: "rhpam-7/rhpam7-apb"
description: "Red Hat Business Central 7.2 OpenShift Ansible Playbook Bundle"
version: "1.0"
from: "openshift3/apb-base:v3.11"
labels:
  - name: "com.redhat.component"
    value: "rhpam-apb"
  - name: "io.k8s.description"
    value: "Platform for running Red Hat Process Automation Manager"
  - name: "io.k8s.display-name"
    value: "Red Hat Process Automation Manager 7.2"
  - name: "io.openshift.tags"
    value: "javaee,eap,eap7,rhpam,rhpam7,apb"
  - name: "com.redhat.apb.spec"
    value: ""
modules:
  repositories:
    - path: modules
  install:
    - name: rhpam-apb
packages:
  content_sets_file: content_sets.yml
  repositories:
    - name: base
      id: rhel-7-server-rpms
  install:
    - java-1.8.0-openjdk-headless
osbs:
  configuration:
    container_file: container.yaml
  repository:
    name: apbs/rhpam-7-apb-openshift
    branch: rhpam-7-rhel-7
